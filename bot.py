import logging
import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
admin_id_env = os.getenv("ADMIN_ID")
if admin_id_env is None:
    raise ValueError("Environment variable ADMIN_ID is not set!")
ADMIN_ID = int(admin_id_env)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

NAME, PHONE, TIME = range(3)

def start(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª", callback_data="book")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å—è–Ω–Ω—É—é Taiga Family!", reply_markup=reply_markup)

def start_booking(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return NAME

def get_name(update: Update, context: CallbackContext):
    context.user_data["name"] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

def get_phone(update: Update, context: CallbackContext):
    context.user_data["phone"] = update.message.text
    update.message.reply_text("–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±—Ä–æ–Ω—å?")
    return TIME

def get_time(update: Update, context: CallbackContext):
    context.user_data["time"] = update.message.text
    name = context.user_data["name"]
    phone = context.user_data["phone"]
    time = context.user_data["time"]

    text = (
        f"üîî –ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üïí –í—Ä–µ–º—è: {time}"
    )

    context.bot.send_message(chat_id=ADMIN_ID, text=text)
    update.message.reply_text("–í–∞—à–∞ –±—Ä–æ–Ω—å –ø—Ä–∏–Ω—è—Ç–∞! –ñ–¥—ë–º –≤–∞—Å ü§ç")
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_booking, pattern="^book$")],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
